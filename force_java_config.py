#!/usr/bin/env python3
"""
Force Neo4j to Use Bundled JRE

This script forces Neo4j to use the bundled JRE. Run this script if you've
installed Java 11 using the installer but Neo4j is still having trouble.
"""

import os
import sys
import platform
import subprocess
import shutil
import re

def print_info(message):
    print(f"[INFO] {message}")

def print_success(message):
    print(f"[SUCCESS] {message}")

def print_error(message):
    print(f"[ERROR] {message}")

def get_app_path():
    """Get the application path"""
    if getattr(sys, 'frozen', False):
        # Running from compiled app
        return os.path.dirname(sys.executable)
    else:
        # Running from script
        return os.path.dirname(os.path.abspath(__file__))

def check_bundled_jre():
    """Check if bundled JRE exists"""
    app_path = get_app_path()
    jre_dir = os.path.join(app_path, "jre")
    
    if not os.path.exists(jre_dir):
        print_error(f"Bundled JRE not found at {jre_dir}")
        return False
    
    # Check for macOS layout first
    if platform.system().lower() == "darwin":
        # macOS JRE has a Contents/Home/bin/java structure
        macos_java_bin = os.path.join(jre_dir, "Contents", "Home", "bin", "java")
        if os.path.exists(macos_java_bin):
            print_info(f"Found bundled JRE (macOS layout) at {jre_dir}")
            
            # Check Java version
            try:
                result = subprocess.run(
                    [macos_java_bin, "-version"],
                    capture_output=True,
                    text=True,
                    check=False
                )
                version_output = result.stderr
                print_info(f"Bundled Java version: {version_output.strip()}")
                
                # Verify it's Java 11+
                version_pattern = re.compile(r'"(\d+)\.(\d+)')
                match = version_pattern.search(version_output)
                if match:
                    major, minor = match.groups()
                    if int(major) >= 11 or (int(major) == 1 and int(minor) >= 11):
                        print_success(f"Bundled Java {major}.{minor} is compatible with Neo4j")
                        return True, macos_java_bin, os.path.join(jre_dir, "Contents", "Home")
            except Exception as e:
                print_error(f"Error checking bundled Java version: {str(e)}")
    
    # Standard layout
    java_exe = os.path.join(jre_dir, "bin", "java")
    if platform.system().lower() == "windows":
        java_exe += ".exe"
    
    if not os.path.exists(java_exe):
        print_error(f"Java executable not found at {java_exe}")
        return False, None, None
    
    # Check Java version
    try:
        result = subprocess.run(
            [java_exe, "-version"],
            capture_output=True,
            text=True,
            check=False
        )
        version_output = result.stderr
        print_info(f"Bundled Java version: {version_output.strip()}")
        
        # Verify it's Java 11+
        version_pattern = re.compile(r'"(\d+)\.(\d+)')
        match = version_pattern.search(version_output)
        if match:
            major, minor = match.groups()
            if int(major) >= 11 or (int(major) == 1 and int(minor) >= 11):
                print_success(f"Bundled Java {major}.{minor} is compatible with Neo4j")
                return True, java_exe, jre_dir
        
        print_error("Bundled Java does not appear to be version 11 or higher")
        return False, None, None
    except Exception as e:
        print_error(f"Error checking bundled Java version: {str(e)}")
        return False, None, None

def fix_neo4j_scripts():
    """Patch Neo4j scripts to use bundled JRE"""
    app_path = get_app_path()
    jre_dir = os.path.join(app_path, "jre")
    neo4j_dir = os.path.join(app_path, "Neo4jDB", "neo4j-server")
    
    if not os.path.exists(neo4j_dir):
        print_error(f"Neo4j installation not found at {neo4j_dir}")
        return False
    
    # Check bundled JRE
    jre_ok, java_bin, jre_home = check_bundled_jre()
    if not jre_ok:
        return False
    
    success = True
    try:
        # 1. Fix wrapper.conf
        print_info("Updating Neo4j wrapper configuration...")
        conf_dir = os.path.join(neo4j_dir, "conf")
        os.makedirs(conf_dir, exist_ok=True)
        
        wrapper_conf = os.path.join(conf_dir, "neo4j-wrapper.conf")
        
        with open(wrapper_conf, 'w') as f:
            f.write("# Neo4j wrapper configuration - FORCED CONFIGURATION\n")
            f.write("# This file was generated by force_java_config.py\n\n")
            f.write(f"wrapper.java.command={java_bin}\n")
        
        # 2. Fix startup scripts
        if platform.system().lower() == "windows":
            # Windows batch file
            neo4j_bat = os.path.join(neo4j_dir, "bin", "neo4j.bat")
            if os.path.exists(neo4j_bat):
                # Backup original if not already backed up
                backup_file = f"{neo4j_bat}.original"
                if not os.path.exists(backup_file):
                    shutil.copy2(neo4j_bat, backup_file)
                
                with open(neo4j_bat, 'r') as f:
                    content = f.read()
                
                # Remove any existing JAVA_HOME settings
                lines = content.split('\n')
                new_lines = []
                skip_next = False
                for i, line in enumerate(lines):
                    if skip_next:
                        skip_next = False
                        continue
                        
                    if "JAVA_HOME" in line and "set" in line.lower():
                        skip_next = True  # Skip the next line too (likely PATH)
                        continue
                    
                    new_lines.append(line)
                
                # Add our JAVA_HOME settings at the start (after any initial comments)
                insert_pos = 0
                for i, line in enumerate(new_lines):
                    if line.strip() and not line.strip().startswith('rem'):
                        insert_pos = i
                        break
                
                new_lines.insert(insert_pos, f'set "JAVA_HOME={jre_home}"')
                new_lines.insert(insert_pos + 1, f'set "PATH={os.path.dirname(java_bin)};%PATH%"')
                
                with open(neo4j_bat, 'w') as f:
                    f.write('\n'.join(new_lines))
                
                print_success(f"Updated {neo4j_bat}")
        else:
            # Unix shell script
            neo4j_script = os.path.join(neo4j_dir, "bin", "neo4j")
            if os.path.exists(neo4j_script):
                # Backup original if not already backed up
                backup_file = f"{neo4j_script}.original"
                if not os.path.exists(backup_file):
                    shutil.copy2(neo4j_script, backup_file)
                
                with open(neo4j_script, 'r') as f:
                    content = f.read()
                
                # Remove any existing JAVA_HOME settings
                lines = content.split('\n')
                new_lines = []
                skip_next = False
                for i, line in enumerate(lines):
                    if skip_next:
                        skip_next = False
                        continue
                        
                    if "JAVA_HOME" in line and "export" in line:
                        skip_next = True  # Skip the next line too (likely PATH)
                        continue
                    
                    new_lines.append(line)
                
                # Add our JAVA_HOME settings at the start (after shebang)
                insert_pos = 1  # After shebang
                for i, line in enumerate(new_lines[1:], 1):
                    if line.strip() and not line.strip().startswith('#'):
                        insert_pos = i
                        break
                
                new_lines.insert(insert_pos, f'export JAVA_HOME="{jre_home}"')
                new_lines.insert(insert_pos + 1, f'export PATH="{os.path.dirname(java_bin)}:$PATH"')
                
                with open(neo4j_script, 'w') as f:
                    f.write('\n'.join(new_lines))
                
                # Make executable
                os.chmod(neo4j_script, 0o755)
                
                print_success(f"Updated {neo4j_script}")
        
        print_success(f"Neo4j configuration updated to use bundled JRE at {jre_home}")
        return True
    
    except Exception as e:
        print_error(f"Error patching Neo4j scripts: {str(e)}")
        return False

def main():
    print("\n=== Force Neo4j to Use Bundled JRE ===\n")
    
    # Check if bundled JRE exists
    if not check_bundled_jre():
        print_error("No compatible bundled JRE found.")
        print_info("Please run the application first and select 'Yes' when prompted to install Java.")
        return 1
    
    # Fix Neo4j configuration
    if not fix_neo4j_scripts():
        print_error("Failed to update Neo4j configuration.")
        return 1
    
    print_success("\nConfiguration complete. Please restart the application.")
    return 0

if __name__ == "__main__":
    sys.exit(main()) 